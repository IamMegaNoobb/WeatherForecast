import streamlit as st
import pandas as pd
import numpy as np
import datetime
import plotly.express as px
import plotly.graph_objects as go
from PIL import Image
import random

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from matplotlib import rcParams
from xgboost import XGBRegressor
from sklearn.metrics import mean_squared_error
from sklearn.metrics import mean_absolute_error
from sklearn.preprocessing import StandardScaler

rcParams['font.family'] = 'Noto Sans Thai'

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
st.set_page_config(
    page_title="‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏Ñ‡πà‡∏≤‡∏ù‡∏∏‡πà‡∏ô PM2.5",
    page_icon="üå§Ô∏è",
    layout="wide",
    initial_sidebar_state="collapsed"
)

# ------------------- Step 1: Load and Combine Data ------------------- #
base_url = "https://raw.githubusercontent.com/IamMegaNoobb/WeatherForecast/main/WeatherForecast/WeatherForecast/PM2.5-Files/"

years = ['2020', '2021', '2022', '2023']
train_df_list = []

for year in years:
    url = base_url + f'average_daliy_PM2.5({year}).xlsx'
    df = pd.read_excel(url, index_col=0, parse_dates=True)
    train_df_list.append(df)

train_df = pd.concat(train_df_list)

# ‡πÇ‡∏´‡∏•‡∏î test set ‡∏õ‡∏µ 2024
test_url = base_url + 'average_daliy_PM2.5(2024).xlsx'
test_df = pd.read_excel(test_url, index_col=0, parse_dates=True)

# ‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß‡∏Ç‡∏≠‡∏á‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô
st.markdown("<h1 class='header'>‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏Ñ‡πà‡∏≤‡∏ù‡∏∏‡πà‡∏ô PM2.5</h1>", unsafe_allow_html=True)
st.markdown("<p class='subheader'>‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏Ñ‡πà‡∏≤‡∏ù‡∏∏‡πà‡∏ô PM2.5 ‡∏î‡πâ‡∏ß‡∏¢ AIRMIND SIGHT: ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÅ‡∏•‡∏∞‡∏ù‡∏∏‡πà‡∏ô PM2.5 ‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ö Predictive Model ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏ó‡∏≤‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏Ç‡∏≠‡∏á‡∏™‡∏±‡∏á‡∏Ñ‡∏°</p>", unsafe_allow_html=True)

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î
col1, col2 = st.columns([1, 1])

with col1:
    selected_date = st.date_input(
        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå",
        datetime.datetime.now().date(),
        min_value=datetime.datetime.now().date() - datetime.timedelta(days=365*5),  # ‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á 5 ‡∏õ‡∏µ
        max_value=datetime.datetime.now().date() + datetime.timedelta(days=365*5)   # ‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤ 5 ‡∏õ‡∏µ
    )
    # ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô string ‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö ‡∏ß‡∏±‡∏ô/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô/‡∏õ‡∏µ
    date = selected_date.strftime("%d/%m/%Y")
    # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    # st.write(f"‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏∑‡∏≠: {date}")

with col2:
    # ------------------- Step 2: Choose a Province -------------------
    # province = st.text_input("\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î: ", key="province_input")
    province = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î", sorted(train_df.columns))
    if province not in train_df.columns:
        st.error(f"‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î {province}")
        st.stop()
    

# ‡∏õ‡∏∏‡πà‡∏°‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå
forecast_button = st.button("‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏Ñ‡πà‡∏≤‡∏ù‡∏∏‡πà‡∏ô", use_container_width=True)

# ------------------- Step 3: Feature Engineering -------------------
def create_features(df, province_name):
    df = df.copy()
    df['dayofyear'] = df.index.dayofyear
    df['month'] = df.index.month
    df['weekday'] = df.index.weekday
    df['lag1'] = df[province_name].shift(1)
    df['lag2'] = df[province_name].shift(2)
    df['lag3'] = df[province_name].shift(3)
    return df

# ‡∏£‡∏ß‡∏° train ‡πÅ‡∏•‡∏∞ test ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ lag ‡∏ï‡∏±‡∏î‡∏ß‡∏±‡∏ô‡∏ï‡πâ‡∏ô‡∏õ‡∏µ 2024
full_df = pd.concat([train_df, test_df])
full_feat = create_features(full_df[[province]], province)

# ‡πÅ‡∏¢‡∏Å‡∏Å‡∏•‡∏±‡∏ö‡∏≠‡∏≠‡∏Å‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á lag ‡πÅ‡∏•‡πâ‡∏ß
train_feat = full_feat.loc[train_df.index].dropna()
test_feat = full_feat.loc[test_df.index]

# ‡πÅ‡∏¢‡∏Å X, y
X_train = train_feat.drop(columns=[province])
X_test = test_feat.drop(columns=[province])
y_train = train_feat[province]
y_test = test_feat[province]

# ------------------- Step 4: Scaling -------------------
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# ------------------- Step 5: Train XGBoost -------------------
model = XGBRegressor(n_estimators=300, learning_rate=0.05, max_depth=6, random_state=42)
model.fit(X_train_scaled, y_train)

# ------------------- Step 6: Predict and Evaluate -------------------
y_pred = model.predict(X_test_scaled)

mse = mean_squared_error(y_test, y_pred)
mae = mean_absolute_error(y_test, y_pred)
rmse = np.sqrt(mse)


# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤ PM2.5 ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®
def get_air_quality_level(pm25):
    if pm25 <= 15:
        return {
            "level": "‡∏î‡∏µ‡∏°‡∏≤‡∏Å",
            "description": "‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏î‡∏µ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏ï‡πà‡∏≠‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û",
            "color" : "	#00E400"
        }
    elif pm25 <= 25:
        return {
            "level": "‡∏î‡∏µ",
            "description": "‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏î‡∏µ ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÑ‡∏î‡πâ‡∏õ‡∏Å‡∏ï‡∏¥",
            "color" : "#A3E635"
        }
    elif pm25 <= 37:
        return {
            "level": "‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á",
            "description": "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏°‡∏µ‡∏ú‡∏•‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡πÑ‡∏ß‡∏ï‡πà‡∏≠‡∏°‡∏•‡∏û‡∏¥‡∏©",
            "color" : "	#FFD700"
        }
    elif pm25 <= 50:
        return {
            "level": "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏°‡∏µ‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏ï‡πà‡∏≠‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û",
            "description": "‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏Ñ‡∏ß‡∏£‡∏•‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏à‡πâ‡∏á",
            "color" : "#FFA500"
        }
    elif pm25 <= 90:
        return {
            "level": "‡∏°‡∏µ‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏ï‡πà‡∏≠‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û",
            "description": "‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡∏Ñ‡∏ß‡∏£‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏à‡πâ‡∏á",
            "color" : "#FF4500"
        }
    else:
        return {
            "level": "‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢",
            "description": "‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡∏Ñ‡∏ß‡∏£‡∏≠‡∏¢‡∏π‡πà‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£ ‡∏õ‡∏¥‡∏î‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á",
            "color" : "#FF0000"
        }
        

def forecast_pm25():
    # ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå
    st.markdown(f"<h2 class='header'>‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏Ñ‡πà‡∏≤‡∏ù‡∏∏‡πà‡∏ô PM2.5 ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î{province}</h2>", unsafe_allow_html=True)
    st.markdown(f"<p>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {date}</p>", unsafe_allow_html=True)
    
    df_select = pd.DataFrame(y_pred)
    df_select.columns = [province]
    df_select.index = X_test.index
    
    pm25 = df_select.loc[[selected_date]].values[0][0]

    result = get_air_quality_level(pm25)

    # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡∏∞‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®
    col1, col2 = st.columns([1, 2])
    
    with col1:
        st.markdown(f"<div class='pm25-value' style='color:#FF9800'>{pm25:.1f}</div>", unsafe_allow_html=True)
        st.markdown("<p>¬µg/m¬≥</p>", unsafe_allow_html=True)       
    
    with col2:
        st.markdown(f"<div class='pm25-level' style='color:{result['color']};'>{result["level"]}</div>", unsafe_allow_html=True)
        st.markdown(f"<p class='pm25-description'>{result["description"]}</p>", unsafe_allow_html=True)
    
    
def plot_1year():
    fig, ax = plt.subplots(figsize=(15, 6))
    ax.plot(y_test.index, y_test, label='Actual', linewidth=2)
    ax.plot(y_test.index, y_pred, label='Predicted', linewidth=2)
    ax.set_title(f'PM2.5 Forecasting in {province} (2024)', fontsize=18)
    ax.set_xlabel('Date')
    ax.set_ylabel('PM2.5 (¬µg/m¬≥)')
    ax.legend()
    ax.grid(True)

    # ‡πÉ‡∏™‡πà‡∏Ñ‡πà‡∏≤ MSE ‡πÉ‡∏ô‡∏°‡∏∏‡∏°‡∏•‡πà‡∏≤‡∏á‡∏ã‡πâ‡∏≤‡∏¢
    ax.text(0.01, 0.01, f'MSE: {mse:.2f}', transform=ax.transAxes,
            fontsize=12, bbox=dict(facecolor='white', alpha=0.8))

    # ‡∏õ‡∏£‡∏±‡∏ö layout ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÉ‡∏ô Streamlit
    fig.tight_layout()
    st.pyplot(fig)

    
def plot_7day():
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á DataFrame ‡∏à‡∏≤‡∏Å‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå
    df_date = pd.DataFrame(y_pred)
    df_date.columns = [province]
    df_date["date"] = X_test.index

    # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
    df_7day_idx = df_date[df_date['date'] == date].index

    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 7 ‡∏ß‡∏±‡∏ô‡∏à‡∏≤‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    df_7day = [df_date.iloc[i:i+7] for i in df_7day_idx]
    df_7day = pd.concat(df_7day)

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á DataFrame ‡∏à‡∏≤‡∏Å‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå
    df_date = pd.DataFrame(y_pred)
    df_date.columns = [province]
    df_date["date"] = X_test.index

    # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
    df_7day_idx = df_date[df_date['date'] == date].index

    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 7 ‡∏ß‡∏±‡∏ô‡∏à‡∏≤‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    df_7day = [df_date.iloc[i:i+7] for i in df_7day_idx]
    df_7day = pd.concat(df_7day)
    
    df_7day_index = df_7day.set_index("date")
    
    # fig, ax = plt.subplots(figsize=(15, 6))
    # ax.plot(df_7day["date"].to_numpy(), df_7day[province].to_numpy(), label='PM2.5 in 7 days', linewidth=2)
    # ax.set_title(f'PM2.5 Forecasting in {province} 2024 (7 days)', fontsize=16)
    # ax.set_xlabel('Date')
    # ax.set_ylabel('PM2.5 ¬µg/m¬≥')
    # ax.legend()
    # ax.grid(True)
    # st.pyplot(fig)
    
    # #‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡∏ù‡∏∏‡πà‡∏ô
    # st.dataframe(df_7day_index)
    
    # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö fig.update_layout()
    y_min = df_7day[province].min()
    y_max = df_7day[province].max()
    y_range = [
        max(0, y_min - 5),
        min(100, y_max + 5)
    ]
    
    fig = px.line(df_7day, x='date', y=[province], markers=True)
    
    fig.update_traces(
        line=dict(color='#1976D2', width=3),
        marker=dict(size=10, color='#1976D2')
    )
    fig.update_layout(
        title='‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Ñ‡πà‡∏≤‡∏ù‡∏∏‡πà‡∏ô PM2.5 (7 ‡∏ß‡∏±‡∏ô)',
        xaxis_title='Date',
        yaxis_title='PM2.5 (¬µg/m¬≥)',
        yaxis=dict(showgrid=True, gridcolor='rgba(255,255,255,0.1)', range=y_range),
        plot_bgcolor='rgba(255, 255, 255, 0.05)',
        paper_bgcolor='rgba(0,0,0,0)',
        margin=dict(l=20, r=20, t=50, b=20),
        height=400
    )
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏™‡πâ‡∏ô‡πÅ‡∏ö‡πà‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®
    fig.add_shape(
        type="line", line=dict(color="#FFC107", width=1, dash="dash"),
        y0=15, y1=15, x0=0, x1=1, xref="paper"
    )
    fig.add_shape(
        type="line", line=dict(color="#FFD700", width=1, dash="dash"),
        y0=25, y1=25, x0=0, x1=1, xref="paper"
    )
    fig.add_shape(
        type="line", line=dict(color="#FFA500", width=1, dash="dash"),
        y0=37, y1=37, x0=0, x1=1, xref="paper"
    )
    fig.add_shape(
        type="line", line=dict(color="#FF4500", width=1, dash="dash"),
        y0=50, y1=50, x0=0, x1=1, xref="paper"
    )
    fig.add_shape(
        type="line", line=dict(color="#FF0000", width=1, dash="dash"),
        y0=90, y1=90, x0=0, x1=1, xref="paper"
    )
    
    # Plot
    st.plotly_chart(fig)


# ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°
if forecast_button or 'last_forecast' in st.session_state:
    forecast_pm25()
    plot_7day()
    
    st.markdown(f"""
    **‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•**
    - Model: XGBoost Regressor
    - MAE: {mae:.2f}
    - MSE: {mse:.2f}
    - RMSE: {rmse:.2f}
    """)

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏ù‡∏∏‡πà‡∏ô
def get_dust_free_hotels(province):
    """
    ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏ù‡∏∏‡πà‡∏ô‡πÉ‡∏Å‡∏•‡πâ‡∏Å‡∏±‡∏ö‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    ‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏à‡∏£‡∏¥‡∏á ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°
    """
    # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏ù‡∏∏‡πà‡∏ô
    hotels_data = {
        "‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£": [
            {"name": "Bangkok Clean Air Hotel", "description": "‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡∏ü‡∏≠‡∏Å‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏™‡∏π‡∏á ‡πÉ‡∏à‡∏Å‡∏•‡∏≤‡∏á‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø", "rating": 4.8},
            {"name": "Sukhumvit Fresh Resort", "description": "‡∏£‡∏µ‡∏™‡∏≠‡∏£‡πå‡∏ó‡∏™‡πÑ‡∏ï‡∏•‡πå‡πÇ‡∏°‡πÄ‡∏î‡∏¥‡∏£‡πå‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏£‡∏≠‡∏á‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏ó‡∏∏‡∏Å‡∏´‡πâ‡∏≠‡∏á", "rating": 4.7},
            {"name": "Silom Breeze Hotel", "description": "‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏ó‡∏µ‡πà‡πÉ‡∏™‡πà‡πÉ‡∏à‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏® ‡∏¢‡πà‡∏≤‡∏ô‡∏™‡∏µ‡∏•‡∏°", "rating": 4.6},
            {"name": "Riverside Pure Air", "description": "‡∏ß‡∏¥‡∏ß‡πÅ‡∏°‡πà‡∏ô‡πâ‡∏≥‡πÄ‡∏à‡πâ‡∏≤‡∏û‡∏£‡∏∞‡∏¢‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡∏ü‡∏≠‡∏Å‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏ó‡∏±‡πâ‡∏á‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°", "rating": 4.9},
            {"name": "Central Embassy Clean Living", "description": "‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å‡∏´‡∏£‡∏π‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏ü‡∏≠‡∏Å‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î", "rating": 4.7}
        ],
        "‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà": [
            {"name": "Nimman Clean Air Residence", "description": "‡∏ó‡∏µ‡πà‡∏û‡∏±‡∏Å‡∏¢‡πà‡∏≤‡∏ô‡∏ô‡∏¥‡∏°‡∏°‡∏≤‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡∏ü‡∏≠‡∏Å‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏ó‡∏∏‡∏Å‡∏´‡πâ‡∏≠‡∏á", "rating": 4.7},
            {"name": "Ping River Fresh Hotel", "description": "‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°‡∏£‡∏¥‡∏°‡πÅ‡∏°‡πà‡∏ô‡πâ‡∏≥‡∏õ‡∏¥‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏™‡∏∞‡∏≠‡∏≤‡∏î", "rating": 4.8},
            {"name": "Mountain Breeze Resort", "description": "‡∏£‡∏µ‡∏™‡∏≠‡∏£‡πå‡∏ó‡∏ö‡∏ô‡∏î‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏ù‡∏∏‡πà‡∏ô‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡πÉ‡∏ô‡πÄ‡∏°‡∏∑‡∏≠‡∏á", "rating": 4.9},
            {"name": "Old City Purified Stay", "description": "‡πÄ‡∏Å‡∏™‡∏ï‡πå‡πÄ‡∏Æ‡∏≤‡∏™‡πå‡πÉ‡∏ô‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡πÄ‡∏Å‡πà‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏£‡∏≠‡∏á‡∏≠‡∏≤‡∏Å‡∏≤‡∏®", "rating": 4.6},
            {"name": "Mae Rim Fresh Air Villa", "description": "‡∏ß‡∏¥‡∏•‡∏•‡πà‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡πÉ‡∏ô‡πÅ‡∏°‡πà‡∏£‡∏¥‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ü‡∏≠‡∏Å‡∏≠‡∏≤‡∏Å‡∏≤‡∏®", "rating": 4.8}
        ]
    }
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    if province not in hotels_data:
        return [
            {"name": f"{province} Clean Air Resort", "description": f"‡∏£‡∏µ‡∏™‡∏≠‡∏£‡πå‡∏ó‡∏õ‡∏•‡∏≠‡∏î‡∏ù‡∏∏‡πà‡∏ô‡∏ä‡∏±‡πâ‡∏ô‡∏ô‡∏≥‡πÉ‡∏ô{province}", "rating": round(random.uniform(4.5, 4.9), 1)},
            {"name": f"{province} Fresh Breeze Hotel", "description": f"‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡∏ü‡∏≠‡∏Å‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏™‡∏π‡∏á‡πÉ‡∏ô{province}", "rating": round(random.uniform(4.5, 4.9), 1)},
            {"name": f"{province} Pure Air Villa", "description": f"‡∏ß‡∏¥‡∏•‡∏•‡πà‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏£‡∏≠‡∏á‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÉ‡∏ô{province}", "rating": round(random.uniform(4.5, 4.9), 1)},
            {"name": f"Central {province} Clean Living", "description": f"‡∏ó‡∏µ‡πà‡∏û‡∏±‡∏Å‡πÉ‡∏à‡∏Å‡∏•‡∏≤‡∏á{province}‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏ü‡∏≠‡∏Å‡∏≠‡∏≤‡∏Å‡∏≤‡∏®", "rating": round(random.uniform(4.5, 4.9), 1)},
            {"name": f"{province} Healthy Stay", "description": f"‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÉ‡∏™‡πà‡πÉ‡∏à‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÉ‡∏ô{province}", "rating": round(random.uniform(4.5, 4.9), 1)}
        ]
    
    return hotels_data[province]

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Ñ‡πà‡∏≤‡∏ù‡∏∏‡πà‡∏ô 7 ‡∏ß‡∏±‡∏ô
# def create_forecast_trend(province, selected_date):
    # # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö 7 ‡∏ß‡∏±‡∏ô (3 ‡∏ß‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡πÅ‡∏•‡∏∞ 3 ‡∏ß‡∏±‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ)
    # dates = [selected_date + datetime.timedelta(days=i-3) for i in range(7)]
    # values = [predict_pm25(province, date) for date in dates]
    
    # # ‡∏™‡∏£‡πâ‡∏≤‡∏á DataFrame
    # df = pd.DataFrame({
    #     '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà': dates,
    #     'PM2.5': values
    # })
    
    # # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü
    # fig = px.line(df, x='‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà', y='PM2.5', markers=True)
    
    # # ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡∏Å‡∏£‡∏≤‡∏ü
    # fig.update_traces(
    #     line=dict(color='#1976D2', width=3),
    #     marker=dict(size=10, color='#1976D2')
    # )
    # fig.update_layout(
    #     title='‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Ñ‡πà‡∏≤‡∏ù‡∏∏‡πà‡∏ô PM2.5 (7 ‡∏ß‡∏±‡∏ô)',
    #     xaxis_title='‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà',
    #     yaxis_title='PM2.5 (¬µg/m¬≥)',
    #     plot_bgcolor='rgba(240, 249, 255, 0.5)',
    #     paper_bgcolor='rgba(0,0,0,0)',
    #     margin=dict(l=20, r=20, t=50, b=20),
    #     height=300
    # )
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏™‡πâ‡∏ô‡πÅ‡∏ö‡πà‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®
    # fig.add_shape(
    #     type="line", line=dict(color="#4CAF50", width=1, dash="dash"),
    #     y0=25, y1=25, x0=0, x1=1, xref="paper"
    # )
    # fig.add_shape(
    #     type="line", line=dict(color="#FFC107", width=1, dash="dash"),
    #     y0=50, y1=50, x0=0, x1=1, xref="paper"
    # )
    # fig.add_shape(
    #     type="line", line=dict(color="#FF9800", width=1, dash="dash"),
    #     y0=100, y1=100, x0=0, x1=1, xref="paper"
    # )
    
    # return fig

# Custom CSS
st.markdown("""
<style>
    .main {
        background-color: #f8f9fa;
    }
    .forecast-card {
        background-color: white;
        border-radius: 10px;
        padding: 20px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
        margin-bottom: 20px;
    }
    .hotel-card {
        background-color: white;
        border-radius: 10px;
        padding: 15px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
        height: 100%;
    }
    .hotel-name {
        font-weight: bold;
        color: #1976D2;
        margin-bottom: 5px;
    }
    .hotel-description {
        color: #555;
        font-size: 0.9em;
    }
    .hotel-rating {
        color: #FF9800;
        font-weight: bold;
    }
    .header {
        color: #1976D2;
        font-weight: bold;
    }
    .subheader {
        color: #555;
        font-size: 1.1em;
    }
    .pm25-value {
        font-size: 3em;
        font-weight: bold;
        margin: 10px 0;
    }
    .pm25-level {
        font-size: 1.5em;
        font-weight: bold;
        margin-bottom: 5px;
    }
    .pm25-description {
        color: #555;
    }
    .footer {
        text-align: center;
        color: #777;
        font-size: 0.8em;
        margin-top: 30px;
        padding: 10px;
        border-top: 1px solid #eee;
    }
</style>
""", unsafe_allow_html=True)

# # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°
# if forecast_button or 'last_forecast' in st.session_state:
    
#     forecast_pm25()
    
    # # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÉ‡∏ô session state
    # if forecast_button:
    #     st.session_state.last_forecast = {
    #         'date': selected_date,
    #         'province': selected_province
    #     }
    
    # # ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å session state ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
    # forecast_date = st.session_state.last_forecast['date'] if 'last_forecast' in st.session_state else selected_date
    # forecast_province = st.session_state.last_forecast['province'] if 'last_forecast' in st.session_state else selected_province
    
    # ‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏Ñ‡πà‡∏≤‡∏ù‡∏∏‡πà‡∏ô
    # pm25_value = predict_pm25(forecast_province, forecast_date)
    # level, color, description = get_air_quality_level(pm25_value)
    
    
    # # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå
    # st.markdown("<div class='forecast-card'>", unsafe_allow_html=True)
    
    # # ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå
    # st.markdown(f"<h2 class='header'>‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏Ñ‡πà‡∏≤‡∏ù‡∏∏‡πà‡∏ô PM2.5 ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î{forecast_province}</h2>", unsafe_allow_html=True)
    # st.markdown(f"<p>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {forecast_date.strftime('%d/%m/%Y')}</p>", unsafe_allow_html=True)
    
    # # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡∏∞‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®
    # col1, col2 = st.columns([1, 2])
    
    # with col1:
    #     st.markdown(f"<div class='pm25-value' style='color:{color}'>{pm25_value}</div>", unsafe_allow_html=True)
    #     st.markdown("<p>¬µg/m¬≥</p>", unsafe_allow_html=True)
    
    # with col2:
    #     st.markdown(f"<div class='pm25-level' style='color:{color}'>{level}</div>", unsafe_allow_html=True)
    #     st.markdown(f"<p class='pm25-description'>{description}</p>", unsafe_allow_html=True)
    
    # # ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°
    # st.plotly_chart(create_forecast_trend(forecast_province, forecast_date), use_container_width=True)
    
    # st.markdown("</div>", unsafe_allow_html=True)
    
    # # ‡πÅ‡∏™‡∏î‡∏á‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏ù‡∏∏‡πà‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
    # st.markdown(f"<h2 class='header'>‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏ù‡∏∏‡πà‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏Å‡∏•‡πâ{forecast_province}</h2>", unsafe_allow_html=True)
    
    # # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°
    # hotels = get_dust_free_hotels(forecast_province)
    
    # # ‡πÅ‡∏™‡∏î‡∏á‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏£‡∏¥‡∏î
    # cols = st.columns(5)
    # for i, hotel in enumerate(hotels):
    #     with cols[i]:
    #         st.markdown(f"""
    #         <div class='hotel-card'>
    #             <div class='hotel-name'>{hotel['name']}</div>
    #             <div class='hotel-rating'>‚òÖ {hotel['rating']}</div>
    #             <div class='hotel-description'>{hotel['description']}</div>
    #         </div>
    #         """, unsafe_allow_html=True)


# ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡πâ‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô
st.markdown("""
<div class='footer'>
    <p>¬© 2025 ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏Ñ‡πà‡∏≤‡∏ù‡∏∏‡πà‡∏ô PM2.5 | ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô</p>
</div>
""", unsafe_allow_html=True)
